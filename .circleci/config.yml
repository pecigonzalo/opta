commands:
    checkout-opta:
        steps:
            - run:
                command: |
                    git config --global user.email "runx-ci@runx.dev"
                    git config --global user.name "Runx CI"
                name: Set git user
            - checkout
    install-opta-dependencies:
        steps:
            - terraform/install:
                arch: amd64
                os: linux
                terraform_version: 1.0.0
            - kubernetes/install-kubectl
            - helm/install-helm-client:
                version: v3.7.1
    install-python:
        steps:
            - run:
                command: |-
                    pyenv install 3.8.12
                    pyenv global 3.8.12
                name: Installing python version 3.8
    install-python-dependencies:
        steps:
            - run:
                command: |-
                    pip install pipenv
                    pipenv install --deploy
                    source $(pipenv --venv)/bin/activate
                name: Install python dependencies
    install-python-dependencies-development:
        steps:
            - run:
                command: |-
                    pip install pipenv
                    pipenv install --deploy --dev
                    source $(pipenv --venv)/bin/activate
                name: Install python development dependencies
    opta-module-with-terraform-generate:
        description: Command to Generate terraform files and plan those changes
        parameters:
            module:
                default: ""
                type: string
            provider:
                default: aws
                type: string
        steps:
            - run:
                command: |-
                    echo "Testing Opta module: << parameters.provider >> - << parameters.module >>"
                    ./dist/opta/opta generate-terraform \
                    --config ./.circleci/ci-tests/terraform-generated-<< parameters.provider >>/module-<< parameters.module >>.yaml \
                    --directory $HOME/generated-tf-files-<< parameters.provider >> \
                    --auto-approve
                    cd $HOME/generated-tf-files-<< parameters.provider >>
                    terraform init
                    terraform plan -compact-warnings -lock=false -input=false -out=tf.plan -target=module.<< parameters.module >>
                name: Generate Terraform Language Files for Opta Module and Terraform plan
                when: always
    remake-environment-configs:
        steps:
            - run:
                command: python ./.circleci/ci-tests/generate_env_config.py << pipeline.parameters.ci-env-name >> << pipeline.parameters.ci-env-region-aws >> << pipeline.parameters.ci-env-region-gcp >>
                name: Remake configs.
            - run:
                command: |-
                    cat ./.circleci/ci-tests/create-and-destroy-aws/environment.yml
                    cat ./.circleci/ci-tests/create-and-destroy-aws/environment-additional-nodegroup.yml
                    cat ./.circleci/ci-tests/create-and-destroy-gcp/environment.yml
                    cat ./.circleci/ci-tests/create-and-destroy-gcp/environment-additional-nodepool.yml
                    cat ./.circleci/ci-tests/todo-list/provider-aws-dns-false.yml
                    cat ./.circleci/ci-tests/todo-list/provider-aws-dns-true.yml
                    cat ./.circleci/ci-tests/todo-list/provider-gcp.yml
                name: Show configs.
executors:
    python-docker:
        docker:
            - image: cimg/python:3.8.12
    ubuntu-machine:
        machine:
            image: ubuntu-2004:202111-01
jobs:
    get-all-parameter-values:
        executor: ubuntu-machine
        steps:
            - run:
                command: |-
                    echo "run-create-and-destroy:     " << pipeline.parameters.run-create-and-destroy >>
                    echo "run-create-and-destroy-azure:     " << pipeline.parameters.run-create-and-destroy-azure >>
                    echo "run-destroy-gcp-env:        " << pipeline.parameters.run-destroy-gcp-env >>
                    echo "run-destroy-aws-env:        " << pipeline.parameters.run-destroy-aws-env >>
                    echo "run-destroy-all-envs:       " << pipeline.parameters.run-destroy-all-envs >>
                    echo "run-ci:                     "  << pipeline.parameters.run-ci >>
                    echo "run-create-destroy-local:   " << pipeline.parameters.run-create-destroy-local >>
                    echo "run-service-mesh-e2e:       " << pipeline.parameters.run-service-mesh-e2e >>
                    echo "test-aws-lambda:            " << pipeline.parameters.test-aws-lambda >>
                    echo "run-release-vs-stable:      " << pipeline.parameters.run-release-vs-stable >>
                    echo "test-aws-dns:               " << pipeline.parameters.test-aws-dns >>
                    echo "run-destroy-aws-dns-false:  " << pipeline.parameters.run-destroy-aws-dns-false >>
                    echo "run-destroy-aws-dns-true:   " << pipeline.parameters.run-destroy-aws-dns-true >>
                    echo "ci-use-diff-env:            " << pipeline.parameters.ci-use-diff-env >>
                    echo "ci-env-name:                " << pipeline.parameters.ci-env-name >>
                    echo "ci-env-region-aws:          " << pipeline.parameters.ci-env-region-aws >>
                    echo "ci-env-region-gcp:          " << pipeline.parameters.ci-env-region-gcp >>
                    echo "run-opta-terraform-generate-test: " << pipeline.parameters.run-opta-terraform-generate-test >>
                name: Get all parameter values.
orbs:
    aws-cli: circleci/aws-cli@2.0
    azure-cli: circleci/azure-cli@1.2.0
    codecov: codecov/codecov@3.1.1
    gcp-cli: circleci/gcp-cli@2.4.0
    helm: circleci/helm@1.2.0
    kubernetes: circleci/kubernetes@0.12.1
    terraform: circleci/terraform@3.0.0
parameters:
    ci-env-name:
        default: env-ci
        type: string
    ci-env-region-aws:
        default: us-east-2
        type: string
    ci-env-region-gcp:
        default: us-central1
        type: string
    ci-use-diff-env:
        default: false
        type: boolean
    run-ci:
        default: false
        type: boolean
    run-create-and-destroy:
        default: false
        type: boolean
    run-create-and-destroy-azure:
        default: false
        type: boolean
    run-create-destroy-local:
        default: false
        type: boolean
    run-destroy-all-envs:
        default: false
        type: boolean
    run-destroy-aws-dns-false:
        default: false
        type: boolean
    run-destroy-aws-dns-true:
        default: false
        type: boolean
    run-destroy-aws-env:
        default: false
        type: boolean
    run-destroy-gcp-env:
        default: false
        type: boolean
    run-opta-terraform-generate-test:
        default: false
        type: boolean
    run-release-vs-stable:
        default: false
        type: boolean
    run-service-mesh-e2e:
        default: false
        type: boolean
    test:
        default: false
        type: boolean
    test-aws-dns:
        default: false
        type: boolean
    test-aws-lambda:
        default: false
        type: boolean
version: 2.1
workflows:
    run-create-and-destroy:
        jobs:
            - get-all-parameter-values
        when: << pipeline.parameters.run-create-and-destroy >>

